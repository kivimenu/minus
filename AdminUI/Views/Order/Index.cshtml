@model IEnumerable<AdminUI.Models.OrderViewModel>

@{
    ViewData["Title"] = "Index";
}
<style>
    .nopadding {
        padding-left: 5x !important;
        padding-right: 5px !important;
    }
</style>

<a id="prepared-order-link" hidden asp-action="UpdateForDelivery"></a>
<a id="completed-order-link" asp-action="UpdateForCompleted"></a>

<a id="get-prepared-orders-link" asp-action="OrdersPrepared"></a>
<a id="get-confirmed-orders-link" asp-action="OrdersConfirmed"></a>
<a id="get-completed-orders-link" asp-action="OrdersCompleted"></a>

<h1>Overview</h1>

<div class="row">
    <div class="col-lg-3 col-6">
        <!-- small card -->
        <div class="small-box bg-info">
            <div class="inner">
                <h3 id="confirmed-order-count"></h3>

                <p>New Orders</p>
            </div>
            <div class="icon">
                @*<i class="fas fa-shopping-cart"></i>*@
            </div>
            <a href="#" class="small-box-footer">
                More info <i class="fas fa-arrow-circle-right"></i>
            </a>
        </div>
    </div>
    <!-- ./col -->
    <div class="col-lg-3 col-6">
        <!-- small card -->
        <div class="small-box bg-success">
            <div class="inner">
                <h3 id="prepared-order-count"></h3>

                <p>Ready To Serve</p>
            </div>
            <div class="icon">
                @*<i class="ion ion-stats-bars"></i>*@
            </div>
            <a href="#" class="small-box-footer">
                More info <i class="fas fa-arrow-circle-right"></i>
            </a>
        </div>
    </div>
    <!-- ./col -->
    <div class="col-lg-3 col-6">
        <!-- small card -->
        <div class="small-box bg-warning">
            <div class="inner">
                <h3 id="completed-order-count"></h3>

                <p>Completed</p>
            </div>
            <div class="icon">
                @*<i class="fas fa-user-plus"></i>*@
            </div>
            <a href="#" class="small-box-footer">
                More info <i class="fas fa-arrow-circle-right"></i>
            </a>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Kitchen</h3>

        <div class="card-tools">
            <button type="button" class="btn btn-tool" data-card-widget="collapse" data-toggle="tooltip" title="Collapse">
                <i class="fas fa-minus"></i>
            </button>
            <button type="button" class="btn btn-tool" data-card-widget="remove" data-toggle="tooltip" title="Remove">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
    <div class="card-body confirmed-order-list-container">
        <div class="row confirmed-order-list">
            @foreach (var item in Model.Where(order => order.OrderStatus == Entity.OrderStatusEnum.CONFIRMED))
            {
                <div class="col col-2 nopadding">
                    <div class="card bg-light md-3" style="max-width: 18rem;">
                        <div class="card-header">Table @Html.DisplayFor(modelItem => item.CounterId) -- @item.Id</div>
                        <ul class="list-group list-group-flush">
                            @foreach (var orderProduct in item.OrderProducts)
                            {
                                <li class="list-group-item">
                                    <span>@orderProduct.Product.Name</span>
                                    <span style="float:right;">x @orderProduct.Quantity</span>
                                </li>
                            }
                            <li class="list-group-item"><button class="btn btn-success" value="@item.Id" onclick="orderPrepared(event)">Ready to Serve</button></li>
                        </ul>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Serve</h3>

        <div class="card-tools">
            <button type="button" class="btn btn-tool" data-card-widget="collapse" data-toggle="tooltip" title="Collapse">
                <i class="fas fa-minus"></i>
            </button>
            <button type="button" class="btn btn-tool" data-card-widget="remove" data-toggle="tooltip" title="Remove">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
    <div class="card-body delivery-list-container">
        <div class="row prepared-order-list">
            @foreach (var item in Model.Where(order => order.OrderStatus == Entity.OrderStatusEnum.DELIVERY))
            {
                <div class="col col-2 nopadding">
                    <div class="card bg-light md-3" style="max-width: 18rem;">
                        <div class="card-header">Table @Html.DisplayFor(modelItem => item.CounterId) -- @item.Id</div>
                        <ul class="list-group list-group-flush">
                            @foreach (var orderProduct in item.OrderProducts)
                            {
                                <li class="list-group-item">
                                    <span>@orderProduct.Product.Name</span>
                                    <span style="float:right;">x @orderProduct.Quantity</span>
                                </li>
                            }
                            <li class="list-group-item"><button class="btn btn-success" value="@item.Id" onclick="orderCompleted(event)">Deliver</button></li>
                        </ul>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Delivered</h3>

        <div class="card-tools">
            <button type="button" class="btn btn-tool" data-card-widget="collapse" data-toggle="tooltip" title="Collapse">
                <i class="fas fa-minus"></i>
            </button>
            <button type="button" class="btn btn-tool" data-card-widget="remove" data-toggle="tooltip" title="Remove">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
    <div class="card-body delivery-list-container">
        <div class="row completed-order-list">
            @foreach (var item in Model.Where(order => order.OrderStatus == Entity.OrderStatusEnum.COMPLETED))
            {
                <div class="col col-2 nopadding">
                    <div class="card bg-light md-3" style="max-width: 18rem;">
                        <div class="card-header">Table @Html.DisplayFor(modelItem => item.CounterId) -- @item.Id</div>
                        <ul class="list-group list-group-flush">
                            @foreach (var orderProduct in item.OrderProducts)
                            {
                                <li class="list-group-item">
                                    <span>@orderProduct.Product.Name</span>
                                    <span style="float:right;">x @orderProduct.Quantity</span>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Payment Online</h3>

        <div class="card-tools">
            <button type="button" class="btn btn-tool" data-card-widget="collapse" data-toggle="tooltip" title="Collapse">
                <i class="fas fa-minus"></i>
            </button>
            <button type="button" class="btn btn-tool" data-card-widget="remove" data-toggle="tooltip" title="Remove">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
    <div class="card-body delivery-list-container">
        <div class="row completed-order-list">
            @*@foreach (var item in Model.Where(order => order.OrderStatus == Entity.OrderStatusEnum.COMPLETED))
            {
                <div class="col col-2 nopadding">
                    <div class="card bg-light md-3" style="max-width: 18rem;">
                        <div class="card-header">Table @Html.DisplayFor(modelItem => item.CounterId)</div>
                        <ul class="list-group list-group-flush">
                            @foreach (var orderProduct in item.OrderProducts)
                            {
                                <li class="list-group-item">
                                    <span>@orderProduct.Product.Name</span>
                                    <span style="float:right;">x @orderProduct.Quantity</span>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            }*@
        </div>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Payment At Desk</h3>

        <div class="card-tools">
            <button type="button" class="btn btn-tool" data-card-widget="collapse" data-toggle="tooltip" title="Collapse">
                <i class="fas fa-minus"></i>
            </button>
            <button type="button" class="btn btn-tool" data-card-widget="remove" data-toggle="tooltip" title="Remove">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
    <div class="card-body delivery-list-container">
        <div class="row completed-order-list">
            @*@foreach (var item in Model.Where(order => order.OrderStatus == Entity.OrderStatusEnum.COMPLETED))
            {
                <div class="col col-2 nopadding">
                    <div class="card bg-light md-3" style="max-width: 18rem;">
                        <div class="card-header">Table @Html.DisplayFor(modelItem => item.CounterId)</div>
                        <ul class="list-group list-group-flush">
                            @foreach (var orderProduct in item.OrderProducts)
                            {
                                <li class="list-group-item">
                                    <span>@orderProduct.Product.Name</span>
                                    <span style="float:right;">x @orderProduct.Quantity</span>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            }*@
        </div>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Completed</h3>

        <div class="card-tools">
            <button type="button" class="btn btn-tool" data-card-widget="collapse" data-toggle="tooltip" title="Collapse">
                <i class="fas fa-minus"></i>
            </button>
            <button type="button" class="btn btn-tool" data-card-widget="remove" data-toggle="tooltip" title="Remove">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
    <div class="card-body delivery-list-container">
        <div class="row completed-order-list">
            @*@foreach (var item in Model.Where(order => order.OrderStatus == Entity.OrderStatusEnum.COMPLETED))
                {
                    <div class="col col-2 nopadding">
                        <div class="card bg-light md-3" style="max-width: 18rem;">
                            <div class="card-header">Table @Html.DisplayFor(modelItem => item.CounterId)</div>
                            <ul class="list-group list-group-flush">
                                @foreach (var orderProduct in item.OrderProducts)
                                {
                                    <li class="list-group-item">
                                        <span>@orderProduct.Product.Name</span>
                                        <span style="float:right;">x @orderProduct.Quantity</span>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }*@
        </div>
    </div>
</div>

<script>
    async function orderPrepared(event) {
        await fetch(document.body.querySelector("#prepared-order-link").getAttribute("href") + "?id=" + event.target.value);
    }

    async function orderCompleted(event) {
        await fetch(document.body.querySelector("#completed-order-link").getAttribute("href") + "?id=" + event.target.value);
    }

    function openConnection() {
        window.orderSocket = new WebSocket('ws://localhost:5556/getorder');

        orderSocket.onopen = () => {
            console.log('Connected for orders...');
            console.log('hello');
            //setInterval(() => {
            //    orderSocket.send("keep alive...");
            //}, 5000);
        };

        orderSocket.onerror = (event) => {
            console.log(event);
        }

        orderSocket.onmessage = async event => {    
            response = await fetch(document.body.querySelector("#get-confirmed-orders-link").getAttribute("href"));
            document.body.querySelector(".confirmed-order-list").innerHTML = await response.text();
            console.log(event.data);
        };
    }

    function openConnectionForDelivery() {
        window.deliverySocket = new WebSocket('ws://localhost:5050/getdelivery');

        deliverySocket.onopen = () => {
            console.log('Connected for delivery...');
            console.log('hello');
            //setInterval(() => {
            //    deliverySocket.send("keep alive...");
            //}, 5000);
        };

        deliverySocket.onerror = (event) => {
            console.log(event);
        }

        deliverySocket.onmessage = async event => {
            if (event.data == "order prepared") {
                response = await fetch(document.body.querySelector("#get-confirmed-orders-link").getAttribute("href"));
                document.body.querySelector(".confirmed-order-list").innerHTML = await response.text();

                if (response.status === 200) {
                    response = await fetch(document.body.querySelector("#get-prepared-orders-link").getAttribute("href"));
                    document.body.querySelector(".prepared-order-list").innerHTML = await response.text();
                }
            } else if (event.data == "order completed") {
                response = await fetch(document.body.querySelector("#get-prepared-orders-link").getAttribute("href"));
                document.body.querySelector(".prepared-order-list").innerHTML = await response.text();

                if (response.status === 200) {
                    response = await fetch(document.body.querySelector("#get-completed-orders-link").getAttribute("href"));
                    document.body.querySelector(".completed-order-list").innerHTML = await response.text();
                }
            }

            console.log(event.data);
        };
    }

    openConnection();
    openConnectionForDelivery();
</script>
