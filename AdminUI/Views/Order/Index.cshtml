@model IEnumerable<AdminUI.Models.OrderViewModel>

@{
    ViewData["Title"] = "Index";
}
<style>
    .nopadding {
        padding-left: 5x !important;
        padding-right: 5px !important;
    }
</style>

<a id="action-linker" hidden asp-action="UpdateForDelivery"></a>
<a id="getter-linker" hidden asp-controller="Orders" asp-action="Get"></a>

<h1>Overview</h1>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Kitchen</h3>

        <div class="card-tools">
            <button type="button" class="btn btn-tool" data-card-widget="collapse" data-toggle="tooltip" title="Collapse">
                <i class="fas fa-minus"></i>
            </button>
            <button type="button" class="btn btn-tool" data-card-widget="remove" data-toggle="tooltip" title="Remove">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
    <div class="card-body confirmed-order-list-container">
        <div class="row confirmed-order-list">
            @foreach (var item in Model)
            {
                <div class="col col-2 nopadding">
                    <div class="card bg-light md-3" style="max-width: 18rem;">
                        <div class="card-header">Table @Html.DisplayFor(modelItem => item.CounterId)</div>
                        <ul class="list-group list-group-flush">
                            @foreach (var orderProduct in item.OrderProducts)
                            {
                                <li class="list-group-item">
                                    <span>@orderProduct.Product.Name</span>
                                    <span style="float:right;">x @orderProduct.Quantity</span>
                                </li>
                            }
                            <li class="list-group-item"><button class="btn btn-success" value="@item.Id" onclick="updateOrderStatus(event)">Ready</button></li>
                        </ul>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Delivery</h3>

        <div class="card-tools">
            <button type="button" class="btn btn-tool" data-card-widget="collapse" data-toggle="tooltip" title="Collapse">
                <i class="fas fa-minus"></i>
            </button>
            <button type="button" class="btn btn-tool" data-card-widget="remove" data-toggle="tooltip" title="Remove">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
    <div class="card-body delivery-list-container">
        <div class="row delivery-list">
            @*@foreach (var item in Model)
                {
                <div class="col col-2 nopadding">
                    <div class="card bg-light md-3" style="max-width: 18rem;">
                        <div class="card-header">Table @Html.DisplayFor(modelItem => item.CounterId)</div>
                        <ul class="list-group list-group-flush">
                            @foreach (var orderProduct in item.OrderProducts)
                            {
                            <li class="list-group-item">
                                <span>@orderProduct.Product.Name</span>
                                <span style="float:right;">x @orderProduct.Quantity</span>
                            </li>
                            }
                            <li class="list-group-item"><button class="btn btn-success" onclick="">Ready</button></li>
                        </ul>
                    </div>
                </div>
                }*@
        </div>
    </div>
</div>

<script>
    async function updateOrderStatus(event) {
        let response = await fetch(document.body.querySelector("#action-linker").getAttribute("href") + "?id=" + event.target.value);

        if (response.status === 200) {
            let response = await fetch("http://localhost:5556/api/restaurant/get");
        }
    }

    function openConnection() {
        window.orderSocket = new WebSocket('ws://localhost:5556/getorder');

        orderSocket.onopen = () => {
            console.log('Connected for orders...');
            console.log('hello');
            setInterval(() => {
                orderSocket.send("keep alive...");
            }, 5000);
        };

        orderSocket.onerror = (event) => {
            console.log(event);
        }

        orderSocket.onmessage = event => {
            let container = document.querySelector(".confirmed-order-list");
            container && container.remove();
            container = document.createElement("div");
            container.classList.add("row", "confirmed-order-list");

            let innerHTML = "";
            JSON.parse(event.data).forEach((item, index) => {
                let products = item.OrderProducts.map((orderProduct) => {
                    return `<li class="list-group-item"><span>${orderProduct.Product.Name}</span><span style="float:right;">x ${orderProduct.Quantity}</span></li>`;
                }).reduce((acc, item) => acc + item);
                let element = `
<div class="col col-2 nopadding">
<div class="card bg-light md-3" style="max-width: 18rem;">
<div class="card-header">Table ${item.CounterId}</div>
<ul class="list-group list-group-flush">
${products}
<li class="list-group-item"><button class="btn btn-success" value="${item.Id}" onclick="updateOrderStatus(event)">Ready</button></li>
</ul>
</div>
</div>`;
                innerHTML += element;
            });
            container.innerHTML = innerHTML;
            document.querySelector(".confirmed-order-list-container").appendChild(container);
            console.log(JSON.parse(event.data));
            console.log("order came...");
        };
    }

    function openConnectionForDelivery() {
        window.deliverySocket = new WebSocket('ws://localhost/adminUI/getdelivery');

        deliverySocket.onopen = () => {
            console.log('Connected for delivery...');
            console.log('hello');
            setInterval(() => {
                deliverySocket.send("keep alive...");
            }, 5000);
        };

        deliverySocket.onerror = (event) => {
            console.log(event);
        }

        deliverySocket.onmessage = event => {
            let container = document.querySelector(".delivery-list");
            container && container.remove();
            container = document.createElement("div");
            container.classList.add("row", "delivery-list");

            let innerHTML = "";
            JSON.parse(event.data).forEach((item, index) => {
                let products = item.OrderProducts.map((orderProduct) => {
                    return `<li class="list-group-item"><span>${orderProduct.Product.Name}</span><span style="float:right;">x ${orderProduct.Quantity}</span></li>`;
                }).reduce((acc, item) => acc + item);
                let element = `
<div class="col col-2 nopadding">
<div class="card bg-light md-3" style="max-width: 18rem;">
<div class="card-header">Table ${item.CounterId}</div>
<ul class="list-group list-group-flush">
${products}
</ul>
</div>
</div>`;
                innerHTML += element;
            });
            container.innerHTML = innerHTML;
            document.querySelector(".delivery-list-container").appendChild(container);
            console.log(JSON.parse(event.data));
            console.log("delivery came...");
        };
    }

    openConnection();
    openConnectionForDelivery();
</script>
